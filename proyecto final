Descripción del problema
Este proyecto consiste en dar la mejor atención de laboratorio para tener un
mayor orden y control tanto como para los trabajadores del laboratorio como
para las que están queriendo realizar algún análisis, Aquí los pacientes primero
se les permiten registrarse en el sitio y también iniciar sesión con los detalles
registrados. Una vez registrados con su dirección y detalles de contacto, los
pacientes ahora pueden ver una variedad pruebas realizadas por el
laboratorio. El sistema también permite a los usuarios reserva cualquier prueba
necesaria, después de la reserva exitosa calcula los costos. Después de la
reserva, la prueba del paciente se registra y el laboratorio ahora puede
recoger muestras de la dirección registrada de los pacientes. El usuario ahora
puede iniciar sesión nuevamente para poder ver el resultado de sus análisis.
Tenemos un encargado que es el que estará de turno en el laboratorio, el
administrador que es el único que puede agregar un nuevo tipo de estudio,
eliminar algún cliente o añadirlo. El cliente es la persona que realizara algún
nuevo análisis el cual deberá registrarse, para poder llevar un historial de todos
sus análisis y también pedir una hora en la cual le gustaría ser atendido para
que asi no tenga que esperar en el momento de ir al laboratorio.
Ventajas
• El sistema permite automatizar el sistema de diagnostico
• Permite un servicio más rápido
• Permite aumentar las ventas y los beneficios de los laboratorios de
diagnostico

Estructura de los archivos creados
struct usuario
{
int idusuario;
string nombre;
string contrasena;
string telefono;
int acceso; //1: administrador, 2: encargado, 3: cliente
int estado;
};
struct cliente
{
int idusuario;
string correo;
int estado;
};
struct encargado
{
int idusuario;
string puesto;
int estado;
};
struct analisis
{
int idanalisis;
int idcliente;
int idtipoanalisis;
int estado;
};
struct resultado
{
int idresultado;
int idanalisis;
string resultados;
string diagnostico;
int estado;
};
struct tipoanalisis
{
int idtipoanalisis;
string nombre;
float precio;
int estado;
};
Los programas fuentes considerados las funciones leer, escribir, consultar, listar
para los archivos identificados
void leerusuario(usuario &reg)
{
cout << endl << "Ingrese el nombre de usuario: ";
do{
getline(cin, reg.nombre);
}while(reg.nombre.size()==0);
cout << endl << "Ingrese la contrasena: ";
do{
getline(cin,reg.contrasena);
}while(reg.contrasena.size()==0);
cout << endl << "Telefono: ";
do{
getline(cin,reg.telefono);
}while(reg.telefono.size()==0);
reg.estado = 0;
}
void leercliente(cliente &reg)
{
cout << endl << "Ingrese el Correo: ";
do{
getline(cin,reg.correo);
}while(reg.correo.size()==0);
reg.estado = 0;
}
void leerencargado(encargado &reg)
{
cout << endl << "Ingrese el puesto: ";
do{
getline(cin,reg.puesto);
}while(reg.puesto.size()==0);
reg.estado = 0;
}
void leertipoanalisis(tipoanalisis &reg)
{
cout << endl << "Ingrese el nombre: ";
do{
getline(cin,reg.nombre);
}while(reg.nombre.size()==0);
cout << endl << "Ingresar un precio: ";
cin >> reg.precio;
reg.estado = 0;
}
void leeranalisis(analisis &reg)
{
if(acceso_usuario_actual == 3)
{
reg.idcliente = id_usuario_actual;
}
else
{
cout << endl << "Ingresar un Id de cliente: ";
cin >> reg.idcliente;
}
listartipoanalisis();
do
{
cout << endl << "Ingrese el tipo de analisis: ";
cin >> reg.idtipoanalisis;
if(!existeTipoAnalisis(reg.idtipoanalisis))
{
cout<< endl <<"id de tipo de analisis no existe";
}
}while(!existeTipoAnalisis(reg.idtipoanalisis));
reg.estado = 0;
}
void leerresultado(resultado &reg)
{
listaranalisis();
do
{
cout << endl << "Ingrese el analisis: ";
cin >> reg.idanalisis;
if(!existeAnalisis(reg.idanalisis))
{
cout<< endl <<"id de analisis no existe";
}
}while(!existeAnalisis(reg.idanalisis));
cout << endl << "Ingrese los resultados del analisis: ";
do{
getline(cin, reg.resultados);
}while(reg.resultados.size()==0);
cout << endl << "Ingrese el diagnostico: ";
do{
getline(cin, reg.diagnostico);
}while(reg.diagnostico.size()==0);
reg.estado = 0;
}
//Adicionar
//tipo 1: admin, 2: encargado, 3: usuario
void addusuario(int tipo)
{
FILE *ptr;
int dup,idusua;
ptr = fopen("Usuarios.dat","ab");
usuario reg;
if(tipo == 1)
{
cout << endl << " No se encontro administrador";
cout << endl << " se procedera a crear uno";
}
do
{
cout << endl << "Ingresar un Id de Usuario: ";
cin >> reg.idusuario;
if(existeUsuario(reg.idusuario))
{
cout<< endl <<"id de usuario ocupado, escoger otro";
}
}while(existeUsuario(reg.idusuario));
leerusuario(reg);
reg.acceso = tipo;
fwrite(&reg, sizeof(reg), 1, ptr);
fclose(ptr);
if(tipo == 2)
{
addencargado(reg.idusuario);
}
if(tipo == 3)
{
addcliente(reg.idusuario);
}
}
void addcliente(int idusuario)
{
FILE *ptr;
ptr = fopen("Cliente.dat","ab");
cliente reg;
reg.idusuario = idusuario;
leercliente(reg);
fwrite(&reg, sizeof(reg), 1, ptr);
fclose(ptr);
}
void addencargado(int idusuario)
{
FILE *ptr;
ptr = fopen("Encargado.dat","ab");
encargado reg;
reg.idusuario = idusuario;
leerencargado(reg);
fwrite(&reg, sizeof(reg), 1, ptr);
fclose(ptr);
}
void addtipoanalisis()
{
FILE *ptr;
ptr = fopen("TipoAnalisis.dat","ab");
tipoanalisis reg;
do
{
cout << endl << "Ingresar un Id de tipo de analisis: ";
cin >> reg.idtipoanalisis;
if(existeTipoAnalisis(reg.idtipoanalisis))
{
cout<< endl <<"id de tipo de analisis ocupado, escoger
otro";
}
}while(existeTipoAnalisis(reg.idtipoanalisis));
leertipoanalisis(reg);
fwrite(&reg, sizeof(reg), 1, ptr);
fclose(ptr);
}
void addanalisis()
{
FILE *ptr;
ptr = fopen("Analisis.dat","ab");
analisis reg;
do
{
cout << endl << "Ingresar un Id de analisis: ";
cin >> reg.idanalisis;
if(existeAnalisis(reg.idanalisis))
{
cout<< endl <<"id de analisis ocupado, escoger otro";
}
}while(existeAnalisis(reg.idanalisis));
leeranalisis(reg);
fwrite(&reg, sizeof(reg), 1, ptr);
fclose(ptr);
}
void addresultado()
{
FILE *ptr;
ptr = fopen("Resultado.dat","ab");
resultado reg;
do
{
cout << endl << "Ingresar un Id de resultado: ";
cin >> reg.idresultado;
if(existeResultado(reg.idresultado))
{
cout<< endl <<"id de resultado ocupado, escoger otro";
}
}while(existeResultado(reg.idresultado));
leerresultado(reg);
fwrite(&reg, sizeof(reg), 1, ptr);
fclose(ptr);
}
void mostrarencabezadousuario()
{
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "---------------------------- LISTADO DE USUARIOS --------------------
--------";
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "Id usuario" << setw(16) << "Nombre" << setw(12) <<
"contrasena" << setw(18) << "Telefono" <<setw(10) << "tipo";
cout << endl << "-----------------------------------------------------------------------------";
}
void mostrarusuariohorizontal(usuario reg)
{
cout << endl << setw(5) << reg.idusuario << setw(20) << reg.nombre<<
setw(12) << reg.contrasena<< setw(25) << reg.telefono;
cout<<" ";
mostrarTipoUsuario(reg.acceso);
}
void mostrarusuariovertical(usuario reg)
{
cout<<endl<<"id: " << reg.idusuario;
cout<<endl<<"nombre: " << reg.nombre;
cout<<endl<<"contrasena: " << reg.contrasena;
cout<<endl<<"telefono: " << reg.telefono;
}
void mostrarencabezadocliente()
{
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "--------------------------- LISTADO DE CLIENTE ------------------------
------";
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "Id usuario" << setw(16) << "Correo";
cout << endl << "-----------------------------------------------------------------------------";
}
void mostrarclientehorizontal(cliente reg)
{
cout << endl << setw(5) << reg.idusuario << setw(20) << reg.correo;
}
void mostrarclientevertical(cliente reg)
{
cout<<endl<<"id: " << reg.idusuario;
cout<<endl<<"correo: " << reg.correo;
}
void mostrarencabezadoencargado()
{
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "--------------------------- LISTADO DE ENCARGADO ---------------
---------------";
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "Id usuario" << setw(16) << "Puesto";
cout << endl << "-----------------------------------------------------------------------------";
}
void mostrarencargadohorizontal(encargado reg)
{
cout << endl << setw(5) << reg.idusuario << setw(20) << reg.puesto;
}
void mostrarencargadovertical(encargado reg)
{
cout<<endl<<"id: " << reg.idusuario;
cout<<endl<<"puesto: " << reg.puesto;
}
void mostrarencabezadotipoanalisis()
{
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "--------------------------- LISTADO DE TIPO DE ANALISIS -----------
-------------------";
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "Id" << setw(16) << "Nombre"<< setw(8) << "Precio";
cout << endl << "-----------------------------------------------------------------------------";
}
void mostrartipoanalisishorizontal(tipoanalisis reg)
{
cout << endl << setw(5) << reg.idtipoanalisis << setw(16) << reg.nombre
<< setw(8) << reg.precio;
}
void mostrartipoanalisisvertical(tipoanalisis reg)
{
cout<<endl<<"id: " << reg.idtipoanalisis;
cout<<endl<<"nombre: " << reg.nombre;
cout<<endl<<"precio: " << reg.precio;
}
void mostrarencabezadoanalisis()
{
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "--------------------------- LISTADO DE ANALISIS -----------------------
-------";
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "Id" << setw(5) << "Cliente"<< setw(8) << "Tipo de analisis";
cout << endl << "-----------------------------------------------------------------------------";
}
void mostraranalisishorizontal(analisis reg)
{
cout << endl << setw(5) << reg.idanalisis << setw(5) << reg.idcliente <<
setw(8) << reg.idtipoanalisis;
}
void mostraranalisisvertical(analisis reg)
{
cout<<endl<<"id: " << reg.idanalisis;
cout<<endl<<"cliente: " << reg.idcliente;
cout<<endl<<"tipo de analisis: " << reg.idtipoanalisis;
}
void mostrarencabezadoresultado()
{
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << "--------------------------- LISTADO DE ANALISIS -----------------------
-------";
cout << endl << "-----------------------------------------------------------------------------";
cout << endl << setw(5) << "Id" << setw(5) << "analisis"<< setw(15) <<
"resultado"<< setw(15) << "diagnostico";
cout << endl << "-----------------------------------------------------------------------------";
}
void mostrarresultadohorizontal(resultado reg)
{
cout << endl << setw(5) << reg.idresultado << setw(5) << reg.idanalisis <<
setw(15) << reg.resultados << setw(15) << reg.diagnostico;
}
void mostrarresultadovertical(resultado reg)
{
cout<<endl<<"id: " << reg.idresultado;
cout<<endl<<"analisis: " << reg.idanalisis;
cout<<endl<<"resultados: " << reg.resultados;
cout<<endl<<"diagnostico: " << reg.diagnostico;
}
void listarusuario()
{
FILE *ptr;
usuario reg;
ptr = fopen("Usuarios.dat","rb");
if(ptr != NULL)
{
fread(&reg, sizeof(reg), 1, ptr);
mostrarencabezadousuario();
while(!feof(ptr))
{
if(reg.estado == 0)
{
mostrarusuariohorizontal(reg);
}
fread(&reg, sizeof(reg), 1, ptr);
}
cout << endl << "------------------------------------------------------------------------
-----";
fclose(ptr);
}
else
{
cout << "No existe el Archivo";
}
}
void listarcliente()
{
FILE *ptr;
cliente reg;
ptr = fopen("Cliente.dat","rb");
if(ptr != NULL)
{
fread(&reg, sizeof(reg), 1, ptr);
cout<<endl;
mostrarencabezadocliente();
cout<<endl;
while(!feof(ptr))
{
if(reg.estado == 0)
{
mostrarclientehorizontal(reg);
}
fread(&reg, sizeof(reg), 1, ptr);
}
cout << endl << "------------------------------------------------------------------------
-----";
fclose(ptr);
}
else
{
cout << "No existe el Archivo";
}
}
void listarencargado()
{
FILE *ptr;
encargado reg;
ptr = fopen("Encargado.dat","rb");
if(ptr != NULL)
{
fread(&reg, sizeof(reg), 1, ptr);
cout<<endl;
mostrarencabezadoencargado();
cout<<endl;
while(!feof(ptr))
{
if(reg.estado == 0)
{
mostrarencargadohorizontal(reg);
}
fread(&reg, sizeof(reg), 1, ptr);
}
cout << endl << "------------------------------------------------------------------------
-----";
fclose(ptr);
}
else
{
cout << "No existe el Archivo";
}
}
void listartipoanalisis()
{
FILE *ptr;
tipoanalisis reg;
ptr = fopen("TipoAnalisis.dat","rb");
if(ptr != NULL)
{
fread(&reg, sizeof(reg), 1, ptr);
cout<<endl;
mostrarencabezadotipoanalisis();
cout<<endl;
while(!feof(ptr))
{
if(reg.estado == 0)
{
mostrartipoanalisishorizontal(reg);
}
fread(&reg, sizeof(reg), 1, ptr);
}
cout << endl << "------------------------------------------------------------------------
-----";
fclose(ptr);
}
else
{
cout << "No existe el Archivo";
}
}
void listaranalisis()
{
FILE *ptr;
analisis reg;
ptr = fopen("Analisis.dat","rb");
if(ptr != NULL)
{
fread(&reg, sizeof(reg), 1, ptr);
cout<<endl;
mostrarencabezadoanalisis();
cout<<endl;
while(!feof(ptr))
{
if(reg.estado == 0)
{
mostraranalisishorizontal(reg);
}
fread(&reg, sizeof(reg), 1, ptr);
}
cout << endl << "------------------------------------------------------------------------
-----";
fclose(ptr);
}
else
{
cout << "No existe el Archivo";
}
}
void listaranalisispendiente()
{
FILE *ptr;
analisis reg;
ptr = fopen("Analisis.dat","rb");
if(ptr != NULL)
{
fread(&reg, sizeof(reg), 1, ptr);
cout<<endl;
mostrarencabezadoanalisis();
cout<<endl;
while(!feof(ptr))
{
if(reg.estado == 0)
{
if(resultadoPendiente(reg.idanalisis))
{
mostraranalisishorizontal(reg);
}
}
fread(&reg, sizeof(reg), 1, ptr);
}
cout << endl << "------------------------------------------------------------------------
-----";
fclose(ptr);
}
else
{
cout << "No existe el Archivo";
}
}
void listarresultado()
{
FILE *ptr;
resultado reg;
ptr = fopen("Resultado.dat","rb");
if(ptr != NULL)
{
fread(&reg, sizeof(reg), 1, ptr);
cout<<endl;
mostrarencabezadoresultado();
cout<<endl;
while(!feof(ptr))
{
if(reg.estado == 0)
{
mostrarresultadohorizontal(reg);
}
fread(&reg, sizeof(reg), 1, ptr);
}
cout << endl << "------------------------------------------------------------------------
-----";
fclose(ptr);
}
else
{
cout << "No existe el Archivo";
}
}
